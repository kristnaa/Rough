
Full Project Set up along with the code 


SPRING MVC project:
------------------

-> Install extrenall tomcat server in your local machine

steps:
------
-> Download the tomcat 9 version form the https://tomcat.apache.org/download-90.cgi
-> Download the zip file as per your system configuration
-> extract the zip file in any working directory


-> in search icon find for the server -> click on create a new server -> 
Apache folder-> select Tomcat 9 version , Add> Browse > select the folder path [ where bin folder available ]> click on next > Add Spring MVC > FINISH



-> create a web mvc project with the following dependencies in pom.xml

-> add the following dependencies in pom.xml 

	spring web mvc
	jakarta servlet api
	javax servlet
	tomcat embed jasper and core



	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>5.3.23</version>
		</dependency>
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>6.0.0</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>6.0.0</version> <!-- Use the appropriate version for your
			project -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<version>9.0.70</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-core</artifactId>
			<version>9.0.70</version>
		</dependency>
	</dependencies>


-> Installl the tomcat server and add the existing spring mvc project to the server.	

-> Now im ready with project setup

       -> Now create foleder -> under 
					src > main> webapp >
				
						  > WEB-INF > views   
								-> .jsp files
						            > web.xml
							    > dispatcher-servlet.xml



web.xml
-------
-> to configure Dispatcher servlet
		
2) create a web.xml file to configure dispatcher servelet

	
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>	




Dispatcher-servlet.xml:
----------------------

-> It is used to activate

	* Handler mapping
	* controller

		
	note: Controllers will connect to ->  services, DAO classes, entity classes ...


-> Create dispacther.servlet.xml file to configure Internal View resolver :


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.example.controller" />		  // Here Modify the package path as per your project
    
    <mvc:annotation-driven />

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

</beans>

usage of above  bean definition of internal view resolver
-------------------------------------------------------



        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />


CONSTRUCT THE PATH FOR THE VIEW NAME:      /WEB-INF/views/index.jsp



      Prefix        , suffix
---------------      -------
/WEB-INF/views/ index .jsp




-> CREATE CONTROLLER CLASS:
--------------------------


Controller class 1:		it uses index.jsp page in views folder
--------------------	

package springwebmvc.java.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/controller1")
public class FirstController {

	@RequestMapping(value = "/one", method = RequestMethod.GET)
	public ModelAndView FirstMethod() {
		ModelAndView m1 = new ModelAndView();
		m1.addObject("message", "data inserted using first Controller 1st method");
		m1.setViewName("index");
		return m1;
	}


	@RequestMapping(value = "/two" , method = RequestMethod.GET)
	public ModelAndView secondMethod() {
		ModelAndView m2 = new ModelAndView();

		m2.addObject("message", "data inserted thorugh 1st Controller 2nd METHOD");
		m2.setViewName("index");

		return m2;
	}

}


Controller class 2 : it uses frontpage.jsp page in views folder
-------------------

package springwebmvc.java.controllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/controller2")
public class SecondController {

	@RequestMapping(value = "/getText", method = RequestMethod.GET)
	public ModelAndView getString() {

		ModelAndView m1 = new ModelAndView("frontpage");
		m1.addObject("text", "SECOND CONTROLLER 1 st Method Executed");
		// m1.setViewName("name of the view page");
		return m1;
	}
	
	@RequestMapping(value = "/getCollege", method = RequestMethod.GET)
	public ModelAndView getCollegeName() {

		ModelAndView m1 = new ModelAndView("frontpage");
		m1.addObject("text", "GMRIT college");
		return m1;
	}
	
	@RequestMapping(value = "/getBranch", method = RequestMethod.GET)
	public ModelAndView getBranchDetails() {

		ModelAndView m1 = new ModelAndView("frontpage");
		m1.addObject("text", "CIVIL Engeneering");
		return m1;
	}
}



------------------------------------------

cerate .jsp file in a new folders "WEB-INF> views Folder > .jsp files



index.jsp
----------
<!DOCTYPE html>
<html>
<head>
    <title>Index page</title>
</head>
<body>
    <h1>${message}</h1>
</body>
</html>


frontpage.jsp
---------------

<!DOCTYPE html>
<html lang="en">
<head>
    <title>frontpage</title>
</head>
<body>

    <h1>${text}</h1>
    
</body>
</html>


-------------------------------------------------

Now Right click on TomCat server -> Click on option called "Add or Remove..."  -> and Add the Existing mvc web project into server -> Finsih 
 
-------------------------------------------------

Now open the web browser and -> use the below URL's to access the Applications 



URL:   to access the application based on the Controller calsses end points
-----

http://localhost:8080/springwebmvc/controller1/one        // controller 1  > method  1 

http://localhost:8080/springwebmvc/controller1/two         // controller 1  > method  2 

http://localhost:8080/springwebmvc/controller2/getText      // controller 2  > method  1 

http://localhost:8080/springwebmvc/controller2/getCollege   // controller 2  > method  2

http://localhost:8080/springwebmvc/controller2/getBranch    // controller 2  > method  3 






---------------------------------------------------------------------

Till now we configured using XML based configuration using   distathcer-servlet.xml -> [Both components scan and Internal view resolver]


Now Comment all the dispather-servlet.xml code and try with Java configuration as below ...... 



FOR JAVA CONFIGURATION :
------------------------


package springwebmvc.java.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@EnableWebMvc
@ComponentScan(basePackages = "springwebmvc.java.controllers")
@Configuration
public class JavaConfig {

	 @Bean
	    public InternalResourceViewResolver viewResolver() {
	        InternalResourceViewResolver resolver = new InternalResourceViewResolver();
	        resolver.setPrefix("/WEB-INF/views/");
	        resolver.setSuffix(".jsp");
	        return resolver;
	    }
}



--

Note:
------
add the following in web.xml to enable the configuration java features 

inlcude the following meta data between ->     <servlet-class ..... / >   and  <load-on-startup...../>


````````````add this 

    <init-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </init-param>
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>springmvc.com.config.WebConfig</param-value> <!-- Your Java config class -->
    </init-param>


run and test the application in web browser using tomcat server



URI:
-----

http://localhost:8080/springwebmvc/controller1/one        // controller 1  > method  1 

http://localhost:8080/springwebmvc/controller1/two         // controller 1  > method  2 

http://localhost:8080/springwebmvc/controller2/getText      // controller 2  > method  1 

http://localhost:8080/springwebmvc/controller2/getCollege   // controller 2  > method  2

http://localhost:8080/springwebmvc/controller2/getBranch    // controller 2  > method  3 


=========================================================================================
